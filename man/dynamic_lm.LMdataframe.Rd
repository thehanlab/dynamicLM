% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynamic_lm.R
\name{dynamic_lm.LMdataframe}
\alias{dynamic_lm.LMdataframe}
\title{Fit a dynamic Cox or cause-specific Cox landmark supermodel to a stacked
landmark dataset}
\usage{
\method{dynamic_lm}{LMdataframe}(
  lmdata,
  formula,
  type = "coxph",
  method = "breslow",
  cluster,
  x = FALSE,
  ...
)
}
\arguments{
\item{lmdata}{An object of class "LMdataframe", this can be created by
running \code{\link[=stack_data]{stack_data()}} and \code{\link[=add_interactions]{add_interactions()}}}

\item{formula}{The formula to be used, remember to include \code{+cluster(ID)} for
the column that indicates the ID of the individual for robust error
estimates. See details for further information.
Note that transformations (e.g., \code{x1*x2}) cannot be used in the formula and
factors/categorical variables must first be made into dummy variables.}

\item{type}{"coxph" or "CSC"/"CauseSpecificCox"}

\item{method}{A character string specifying the method for tie handling.
Default is "breslow". More information can be found in \code{\link[survival:coxph]{survival::coxph()}}.}

\item{cluster}{Variable which clusters the observations (for e.g., identifies
repeated patient IDs), for the purposes of a robust variance. If omitted,
extracted from \code{formula}.}

\item{x}{Logical value. If set to true, \code{lmdata} is stored in the returned
object. This is required for internal validation.}

\item{...}{Arguments given to coxph or CSC.}
}
\value{
An object of class "LMcoxph" or "LMCSC" with components:
\itemize{
\item model: fitted model
\item type: as input
\item w, func_covars, func_lms, lm_covs, all_covs, outcome: as in \code{lmdata}
\item LHS: the survival outcome
\item linear.predictors: the vector of linear predictors, one per subject.
Note that this vector has not been centered.
\item args: arguments used to call model fitting
\item id_col: the cluster argument, often specifies the column with patient ID
\item lm_col: column name that indicates the landmark time point for a row.
}
}
\description{
Fit a dynamic Cox or cause-specific Cox landmark supermodel to a stacked
landmark dataset
}
\details{
For standard survival data (one event and possible censoring), use
\code{type = "coxph"} and a a formula with left-hand side (LHS) of the form
\code{Surv(LM, Time, event)}. For competing risks (multiple events and possible
censoring), use \code{type = "CSC"} and a LHS of the form
\code{Hist(Time, event, LM)}
}
\examples{

data(relapse)
outcome <- list(time = "Time", status = "event")
covars <- list(fixed = c("male", "stage", "bmi"),
               varying = c("treatment"))
w <- 60; lms <- c(0, 6, 12, 18)
lmdata <- stack_data(relapse, outcome, lms, w, covars, format = "long",
                     id = "ID", rtime = "T_txgiven")
lmdata <- add_interactions(lmdata, func_covars = c("linear", "quadratic"),
                           func_lms = c("linear", "quadratic"))

# for competing risk data (in this example)
formula <- "Hist(Time, event, LM) ~ male + male_LM1 + male_LM2 +
            stage + stage_LM1 + stage_LM2 + bmi + bmi_LM1 + bmi_LM2 +
            treatment + treatment_LM1 + treatment_LM2 + LM1 + LM2 + cluster(ID)"
supermodel <- dynamic_lm(lmdata, as.formula(formula), "CSC", x = TRUE)

#' \dontrun{
# for survival data
formula <- "Surv(LM, Time, event) ~
            age + age_LM1 + age_LM2 + male + male_LM1 + male_LM2 +
            stage + stage_LM1 + stage_LM2 + bmi + bmi_LM1 + bmi_LM2 +
            treatment + treatment_LM1 + treatment_LM2 + LM1 + LM2 + cluster(ID)"
supermodel <- dynamic_lm(lmdata, as.formula(formula), "coxph")
}

print(supermodel)

coef(supermodel)

par(mfrow = c(2, 3))
plot(supermodel)

}
